import React, { useState, useEffect } from 'react';
import styles from './ProfileTab.module.css';
import authService from '../../services/authService';
import userService from '../../services/userService';
// !!! IMPORT ALERTBOX !!!
import AlertBox from '../../components/AlertBox/AlertBox'; 

const ProfileTab = ({ onSave }) => {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    phoneNumber: '',
    bio: '',
    avatar: ''
  });
  
  // TH√äM STATE CHO LOADING V√Ä TH√îNG B√ÅO
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState(null); // {type: 'success'/'error', text: '...'}

  // üü¢ Load d·ªØ li·ªáu t·ª´ localStorage ho·∫∑c t·ª´ authService
  useEffect(() => {
    const storedUser = localStorage.getItem('user');
    const currentUser = storedUser
      ? JSON.parse(storedUser)
      : authService.getCurrentUser();

    if (currentUser) {
      const nameParts = currentUser.fullName
        ? currentUser.fullName.split(' ')
        : [];
      const firstName = nameParts.slice(0, -1).join(' ') || '';
      const lastName = nameParts.slice(-1).join(' ') || '';

      setFormData({
        firstName,
        lastName,
        email: currentUser.email || '',
        phoneNumber: currentUser.phoneNumber || '',
        bio: currentUser.bio || 'Ch∆∞a c√≥ m√¥ t·∫£ c√° nh√¢n.',
        avatar:
          currentUser.avatar || 'https://picsum.photos/seed/user123/100/100.jpg'
      });
    }
  }, []);

  // üü¢ C·∫≠p nh·∫≠t input state
  const handleChange = (e) => {
    const { id, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [id]: value
    }));
  };

  // üü¢ Submit form c·∫≠p nh·∫≠t th√¥ng tin
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    setLoading(true); // B·∫Øt ƒë·∫ßu loading
    setMessage(null); // X√≥a th√¥ng b√°o c≈©

    const updatedUser = {
      ...formData,
      fullName: `${formData.firstName} ${formData.lastName}`.trim()
    };

    try {
      const response = await userService.updateProfile(updatedUser);

      // üü¢ Ch·ªâ l∆∞u ph·∫ßn d·ªØ li·ªáu user
      if (response?.data) {
        const userData = response.data;
        localStorage.setItem('user', JSON.stringify(userData));

        // üü¢ C·∫≠p nh·∫≠t l·∫°i form ƒë·ªÉ hi·ªÉn th·ªã ngay
        const nameParts = userData.fullName
          ? userData.fullName.split(' ')
          : [];
        const firstName = nameParts.slice(0, -1).join(' ') || '';
        const lastName = nameParts.slice(-1).join(' ') || '';

        setFormData({
          firstName,
          lastName,
          email: userData.email || '',
          phoneNumber: userData.phoneNumber || '',
          bio: userData.bio || 'Ch∆∞a c√≥ m√¥ t·∫£ c√° nh√¢n.',
          avatar:
            userData.avatar ||
            'https://picsum.photos/seed/user123/100/100.jpg'
        });

        // üü¢ Callback cho component cha (n·∫øu c√≥)
        if (onSave) onSave(userData);

        // THAY TH·∫æ alert() B·∫∞NG ALERTBOX TH√ÄNH C√îNG
        setMessage({
            type: 'success',
            text: 'C·∫≠p nh·∫≠t th√¥ng tin h·ªì s∆° th√†nh c√¥ng!'
        });
        
      } else {
        throw new Error('Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá t·ª´ server');
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t:', error);
      
      // THAY TH·∫æ alert() B·∫∞NG ALERTBOX TH·∫§T B·∫†I
      setMessage({
        type: 'error',
        text: error.message || 'C·∫≠p nh·∫≠t th·∫•t b·∫°i! Vui l√≤ng th·ª≠ l·∫°i.'
      });
    } finally {
      setLoading(false); // T·∫Øt loading
      // T·ª± ƒë·ªông ·∫©n th√¥ng b√°o sau 5 gi√¢y
      setTimeout(() => {
        setMessage(null);
      }, 5000); 
    }
  };

  // üü¢ H·ªßy thay ƒë·ªïi, kh√¥i ph·ª•c d·ªØ li·ªáu g·ªëc
  const handleCancel = () => {
    // X√≥a th√¥ng b√°o n·∫øu c√≥
    setMessage(null); 
    
    const storedUser = localStorage.getItem('user');
    const currentUser = storedUser
      ? JSON.parse(storedUser)
      : authService.getCurrentUser();

    if (currentUser) {
      const nameParts = currentUser.fullName
        ? currentUser.fullName.split(' ')
        : [];
      const firstName = nameParts.slice(0, -1).join(' ') || '';
      const lastName = nameParts.slice(-1).join(' ') || '';

      setFormData({
        firstName,
        lastName,
        email: currentUser.email || '',
        phoneNumber: currentUser.phoneNumber || '',
        bio: currentUser.bio || 'Ch∆∞a c√≥ m√¥ t·∫£ c√° nh√¢n.',
        avatar:
          currentUser.avatar || 'https://picsum.photos/seed/user123/100/100.jpg'
      });
    }
  };

  return (
    <div className={styles.tabContent} data-aos="fade-up">
      
      {/* HI·ªÇN TH·ªä ALERTBOX */}
      {message && <AlertBox message={message} />} 

      <div className={styles.card}>
        <div className={styles.cardBody}>
          <div className={styles.profilePictureContainer}>
            <img
              src={formData.avatar}
              alt="Profile"
              className={styles.profilePicture}
            />
            <div className={styles.profilePictureInfo}>
              <h3 className={styles.profilePictureTitle}>·∫¢nh ƒë·∫°i di·ªán</h3>
              <p className={styles.profilePictureSubtitle}>
                JPG, GIF ho·∫∑c PNG. T·ªëi ƒëa 2MB
              </p>
              <button
                type="button"
                className={`${styles.btnCustom} ${styles.btnOutlineCustom} ${styles.btnSm}`}
              >
                Thay ƒë·ªïi ·∫£nh
              </button>
            </div>
          </div>

          <form onSubmit={handleSubmit}>
            <div className={styles.formRow}>
              <div className={styles.formGroup}>
                <label htmlFor="firstName" className={styles.formLabel}>
                  H·ªç
                </label>
                <input
                  type="text"
                  id="firstName"
                  className={styles.formControl}
                  value={formData.firstName}
                  onChange={handleChange}
                />
              </div>
              <div className={styles.formGroup}>
                <label htmlFor="lastName" className={styles.formLabel}>
                  T√™n
                </label>
                <input
                  type="text"
                  id="lastName"
                  className={styles.formControl}
                  value={formData.lastName}
                  onChange={handleChange}
                />
              </div>
            </div>

            <div className={styles.formRow}>
              <div className={styles.formGroup}>
                <label htmlFor="email" className={styles.formLabel}>
                  Email
                </label>
                <input
                  type="email"
                  id="email"
                  className={styles.formControl}
                  value={formData.email}
                  onChange={handleChange}
                  disabled
                />
              </div>
              <div className={styles.formGroup}>
                <label htmlFor="phoneNumber" className={styles.formLabel}>
                  S·ªë ƒëi·ªán tho·∫°i
                </label>
                <input
                  type="tel"
                  id="phoneNumber"
                  className={styles.formControl}
                  value={formData.phoneNumber}
                  onChange={handleChange}
                />
              </div>
            </div>

            <div className={styles.formGroup}>
              <label htmlFor="bio" className={styles.formLabel}>
                Gi·ªõi thi·ªáu
              </label>
              <textarea
                id="bio"
                className={styles.formControl}
                rows="3"
                value={formData.bio}
                onChange={handleChange}
              ></textarea>
            </div>

            <div className={styles.formActions}>
              <button
                type="submit"
                className={`${styles.btnCustom} ${styles.btnPrimaryCustom}`}
                disabled={loading} // V√¥ hi·ªáu h√≥a khi ƒëang loading
              >
                {loading ? 'ƒêang l∆∞u...' : 'L∆∞u thay ƒë·ªïi'}
              </button>
              <button
                type="button"
                className={`${styles.btnCustom} ${styles.btnOutlineCustom}`}
                onClick={handleCancel}
                disabled={loading} // V√¥ hi·ªáu h√≥a khi ƒëang loading
              >
                H·ªßy
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default ProfileTab;