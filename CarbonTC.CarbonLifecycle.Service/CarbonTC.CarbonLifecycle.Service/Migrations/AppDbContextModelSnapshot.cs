// <auto-generated />
using System;
using CarbonTC.CarbonLifecycle.Service.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarbonTC.CarbonLifecycle.Service.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CarbonTC.CarbonLifecycle.Service.Models.Entities.AuditReport", b =>
                {
                    b.Property<Guid>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FilePath")
                        .HasColumnType("longtext");

                    b.Property<string>("Findings")
                        .HasColumnType("longtext");

                    b.Property<Guid>("GeneratedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ReportId");

                    b.HasIndex("RequestId");

                    b.ToTable("AuditReports");
                });

            modelBuilder.Entity("CarbonTC.CarbonLifecycle.Service.Models.Entities.CVAStandard", b =>
                {
                    b.Property<Guid>("StandardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double>("ConversionRate")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<double>("MinDistanceRequirement")
                        .HasColumnType("double");

                    b.Property<string>("StandardName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("StandardId");

                    b.ToTable("CVAStandards");
                });

            modelBuilder.Entity("CarbonTC.CarbonLifecycle.Service.Models.Entities.CarbonCredit", b =>
                {
                    b.Property<Guid>("CreditId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreditSerialNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreditType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("IssuedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("IssuedByCVA")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RequestId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Vintage")
                        .HasColumnType("int");

                    b.HasKey("CreditId");

                    b.HasIndex("CreditSerialNumber")
                        .IsUnique();

                    b.HasIndex("RequestId");

                    b.ToTable("CarbonCredits");
                });

            modelBuilder.Entity("CarbonTC.CarbonLifecycle.Service.Models.Entities.EVJourney", b =>
                {
                    b.Property<Guid>("JourneyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("BatchId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UploadedFilePath")
                        .HasColumnType("longtext");

                    b.HasKey("JourneyId");

                    b.HasIndex("BatchId");

                    b.ToTable("EVJourneys");
                });

            modelBuilder.Entity("CarbonTC.CarbonLifecycle.Service.Models.Entities.JourneyBatch", b =>
                {
                    b.Property<Guid>("BatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("CalculatedCredits")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("TotalCO2SavedKg")
                        .HasColumnType("double");

                    b.Property<double>("TotalDistanceKm")
                        .HasColumnType("double");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("BatchId");

                    b.ToTable("JourneyBatches");
                });

            modelBuilder.Entity("CarbonTC.CarbonLifecycle.Service.Models.Entities.VerificationRequest", b =>
                {
                    b.Property<Guid>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BatchId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Remarks")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("ReviewedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("StandardId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("VerificationStandard")
                        .HasColumnType("longtext");

                    b.HasKey("RequestId");

                    b.HasIndex("BatchId");

                    b.HasIndex("StandardId");

                    b.ToTable("VerificationRequests");
                });

            modelBuilder.Entity("CarbonTC.CarbonLifecycle.Service.Models.Entities.AuditReport", b =>
                {
                    b.HasOne("CarbonTC.CarbonLifecycle.Service.Models.Entities.VerificationRequest", "VerificationRequest")
                        .WithMany("AuditReports")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VerificationRequest");
                });

            modelBuilder.Entity("CarbonTC.CarbonLifecycle.Service.Models.Entities.CarbonCredit", b =>
                {
                    b.HasOne("CarbonTC.CarbonLifecycle.Service.Models.Entities.VerificationRequest", "VerificationRequest")
                        .WithMany("CarbonCredits")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VerificationRequest");
                });

            modelBuilder.Entity("CarbonTC.CarbonLifecycle.Service.Models.Entities.EVJourney", b =>
                {
                    b.HasOne("CarbonTC.CarbonLifecycle.Service.Models.Entities.JourneyBatch", "Batch")
                        .WithMany("Journeys")
                        .HasForeignKey("BatchId");

                    b.Navigation("Batch");
                });

            modelBuilder.Entity("CarbonTC.CarbonLifecycle.Service.Models.Entities.VerificationRequest", b =>
                {
                    b.HasOne("CarbonTC.CarbonLifecycle.Service.Models.Entities.JourneyBatch", "JourneyBatch")
                        .WithMany("VerificationRequests")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarbonTC.CarbonLifecycle.Service.Models.Entities.CVAStandard", "CVAStandard")
                        .WithMany("VerificationRequests")
                        .HasForeignKey("StandardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CVAStandard");

                    b.Navigation("JourneyBatch");
                });

            modelBuilder.Entity("CarbonTC.CarbonLifecycle.Service.Models.Entities.CVAStandard", b =>
                {
                    b.Navigation("VerificationRequests");
                });

            modelBuilder.Entity("CarbonTC.CarbonLifecycle.Service.Models.Entities.JourneyBatch", b =>
                {
                    b.Navigation("Journeys");

                    b.Navigation("VerificationRequests");
                });

            modelBuilder.Entity("CarbonTC.CarbonLifecycle.Service.Models.Entities.VerificationRequest", b =>
                {
                    b.Navigation("AuditReports");

                    b.Navigation("CarbonCredits");
                });
#pragma warning restore 612, 618
        }
    }
}
