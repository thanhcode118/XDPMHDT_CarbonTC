// <auto-generated />
using System;
using CarbonTC.CarbonLifecycle.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarbonTC.CarbonLifecycle.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251024032359_AddVeriRequestToStandardAndCreditLink")]
    partial class AddVeriRequestToStandardAndCreditLink
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("CarbonTC.CarbonLifecycle.Domain.Entities.AuditReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ChangeDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("char(36)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NewValues")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OriginalValues")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AuditReports");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fedcba98-7654-4fed-8cba-fedcba987654"),
                            Action = "Seed",
                            ChangeDate = new DateTime(2025, 10, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            ChangedBy = "system-seed",
                            CreatedAt = new DateTime(2025, 10, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            EntityId = new Guid("b0b0b0b0-b0b0-4b0b-8b0b-0b0b0b0b0b0b"),
                            EntityType = "JourneyBatch",
                            LastModifiedAt = new DateTime(2025, 10, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            NewValues = "{'Status':'Verified'}",
                            OriginalValues = "{}"
                        });
                });

            modelBuilder.Entity("CarbonTC.CarbonLifecycle.Domain.Entities.CVAStandard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("ConversionRate")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("MinDistanceRequirement")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("StandardName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("CVAStandards");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2a0a0f0-a3b0-4b10-8b7a-0a0a0a0a0a01"),
                            ConversionRate = 0.12m,
                            CreatedAt = new DateTime(2025, 10, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            EffectiveDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 10, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            MinDistanceRequirement = 1.0m,
                            StandardName = "TC-Std-VFe34-2024",
                            VehicleType = "Vinfast-VFe34"
                        },
                        new
                        {
                            Id = new Guid("e1b1b1f1-b4c1-4c21-9c8b-1b1b1b1b1b02"),
                            ConversionRate = 0.09m,
                            CreatedAt = new DateTime(2025, 10, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            EffectiveDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EndDate = new DateTime(2025, 12, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            LastModifiedAt = new DateTime(2025, 10, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            MinDistanceRequirement = 1.0m,
                            StandardName = "TC-Std-TeslaY-2024",
                            VehicleType = "Tesla-ModelY"
                        });
                });

            modelBuilder.Entity("CarbonTC.CarbonLifecycle.Domain.Entities.CarbonCredit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("AmountKgCO2e")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("JourneyBatchId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("VerificationRequestId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("JourneyBatchId");

                    b.HasIndex("VerificationRequestId");

                    b.ToTable("CarbonCredits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("abcdef12-3456-4abc-9def-abcdef123456"),
                            AmountKgCO2e = 14.040m,
                            CreatedAt = new DateTime(2025, 10, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            IssueDate = new DateTime(2025, 10, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            JourneyBatchId = new Guid("b0b0b0b0-b0b0-4b0b-8b0b-0b0b0b0b0b0b"),
                            LastModifiedAt = new DateTime(2025, 10, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            TransactionHash = "0xabc123def4567890",
                            UserId = "auth0|demo-user-12345"
                        });
                });

            modelBuilder.Entity("CarbonTC.CarbonLifecycle.Domain.Entities.EVJourney", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("CO2EstimateKg")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("DistanceKm")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("JourneyBatchId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("JourneyBatchId");

                    b.ToTable("EVJourneys");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4a7b-8c9d-0e1f2a3b4c5d"),
                            CO2EstimateKg = 10.260m,
                            CreatedAt = new DateTime(2025, 10, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            Destination = "N/A",
                            DistanceKm = 85.5m,
                            EndTime = new DateTime(2025, 10, 20, 9, 15, 0, 0, DateTimeKind.Utc),
                            JourneyBatchId = new Guid("b0b0b0b0-b0b0-4b0b-8b0b-0b0b0b0b0b0b"),
                            LastModifiedAt = new DateTime(2025, 10, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            Origin = "N/A",
                            StartTime = new DateTime(2025, 10, 20, 8, 0, 0, 0, DateTimeKind.Utc),
                            Status = 3,
                            UserId = "auth0|demo-user-12345",
                            VehicleType = "Vinfast-VFe34"
                        },
                        new
                        {
                            Id = new Guid("f6e5d4c3-b2a1-4c5d-9e8f-1a2b3c4d5e6f"),
                            CO2EstimateKg = 3.780m,
                            CreatedAt = new DateTime(2025, 10, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            Destination = "N/A",
                            DistanceKm = 42.0m,
                            EndTime = new DateTime(2025, 10, 21, 15, 0, 0, 0, DateTimeKind.Utc),
                            JourneyBatchId = new Guid("b0b0b0b0-b0b0-4b0b-8b0b-0b0b0b0b0b0b"),
                            LastModifiedAt = new DateTime(2025, 10, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            Origin = "N/A",
                            StartTime = new DateTime(2025, 10, 21, 14, 0, 0, 0, DateTimeKind.Utc),
                            Status = 3,
                            UserId = "auth0|demo-user-12345",
                            VehicleType = "Tesla-ModelY"
                        });
                });

            modelBuilder.Entity("CarbonTC.CarbonLifecycle.Domain.Entities.JourneyBatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("NumberOfJourneys")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCO2SavedKg")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("TotalDistanceKm")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("VerificationTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("JourneyBatches");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0b0b0b0-b0b0-4b0b-8b0b-0b0b0b0b0b0b"),
                            CreatedAt = new DateTime(2025, 10, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreationTime = new DateTime(2025, 10, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            LastModifiedAt = new DateTime(2025, 10, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            NumberOfJourneys = 2,
                            Status = 2,
                            TotalCO2SavedKg = 14.040m,
                            TotalDistanceKm = 127.5m,
                            UserId = "auth0|demo-user-12345",
                            VerificationTime = new DateTime(2025, 10, 23, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("CarbonTC.CarbonLifecycle.Domain.Entities.VerificationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CvaStandardId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("JourneyBatchId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RequestorId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VerificationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("VerifierId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CvaStandardId");

                    b.HasIndex("JourneyBatchId");

                    b.ToTable("VerificationRequests");

                    b.HasData(
                        new
                        {
                            Id = new Guid("12345678-90ab-4cde-8fab-1234567890ab"),
                            CreatedAt = new DateTime(2025, 10, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            JourneyBatchId = new Guid("b0b0b0b0-b0b0-4b0b-8b0b-0b0b0b0b0b0b"),
                            LastModifiedAt = new DateTime(2025, 10, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            Notes = "Seed data - automatically approved.",
                            RequestDate = new DateTime(2025, 10, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            RequestorId = "auth0|demo-user-12345",
                            Status = 1,
                            VerificationDate = new DateTime(2025, 10, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            VerifierId = "system-seed"
                        });
                });

            modelBuilder.Entity("CarbonTC.CarbonLifecycle.Domain.Entities.CarbonCredit", b =>
                {
                    b.HasOne("CarbonTC.CarbonLifecycle.Domain.Entities.JourneyBatch", "JourneyBatch")
                        .WithMany("CarbonCredits")
                        .HasForeignKey("JourneyBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarbonTC.CarbonLifecycle.Domain.Entities.VerificationRequest", "VerificationRequest")
                        .WithMany("CarbonCredits")
                        .HasForeignKey("VerificationRequestId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("JourneyBatch");

                    b.Navigation("VerificationRequest");
                });

            modelBuilder.Entity("CarbonTC.CarbonLifecycle.Domain.Entities.EVJourney", b =>
                {
                    b.HasOne("CarbonTC.CarbonLifecycle.Domain.Entities.JourneyBatch", "JourneyBatch")
                        .WithMany("EVJourneys")
                        .HasForeignKey("JourneyBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JourneyBatch");
                });

            modelBuilder.Entity("CarbonTC.CarbonLifecycle.Domain.Entities.VerificationRequest", b =>
                {
                    b.HasOne("CarbonTC.CarbonLifecycle.Domain.Entities.CVAStandard", "CvaStandard")
                        .WithMany("VerificationRequests")
                        .HasForeignKey("CvaStandardId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CarbonTC.CarbonLifecycle.Domain.Entities.JourneyBatch", "JourneyBatch")
                        .WithMany("VerificationRequests")
                        .HasForeignKey("JourneyBatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CvaStandard");

                    b.Navigation("JourneyBatch");
                });

            modelBuilder.Entity("CarbonTC.CarbonLifecycle.Domain.Entities.CVAStandard", b =>
                {
                    b.Navigation("VerificationRequests");
                });

            modelBuilder.Entity("CarbonTC.CarbonLifecycle.Domain.Entities.JourneyBatch", b =>
                {
                    b.Navigation("CarbonCredits");

                    b.Navigation("EVJourneys");

                    b.Navigation("VerificationRequests");
                });

            modelBuilder.Entity("CarbonTC.CarbonLifecycle.Domain.Entities.VerificationRequest", b =>
                {
                    b.Navigation("CarbonCredits");
                });
#pragma warning restore 612, 618
        }
    }
}
